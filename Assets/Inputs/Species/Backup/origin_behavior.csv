States,Name,Type
0,INIT,Init
1,grow,Inter
2,fight,Inter
3,lay scoot,trigger{lay}
4,lay picker,trigger{lay}
5,lay soldier,trigger{lay}
,,
Transitions,Start State,End State
0,INIT,grow
1,INIT,fight
2,grow,lay picker
3,grow,lay scoot
4,fight,lay soldier
,,
Syntax Tree,output,
0,0,
Nodes,Type,output (Node -> Input)
0,operator{B>SS},
1,param{const scal=20},0->1
2,operator{S+SS},0->0
3,operator{SgetRT},2->0
4,operator{SgetRT},2->1
5,operator{RgetRT},3->0
6,param{const txt=scoot},3->1
7,operator{RgetRT},4->0
8,param{const txt=picker},4->1
9,param{ref:hive},5->0
10,param{const txt=population},5->1
11,param{ref:hive},7->0
12,param{const txt=population},7->1
,,
Syntax Tree,output,
0,2,
Nodes,Type,output (Node -> Input)
0,operator{B>SS},
1,operator{SgetRT},0->0
2,operator{SgetRT},0->1
3,operator{RgetRT},1->0
4,param{const txt=scoot},1->1
5,operator{RgetRT},2->0
6,param{const txt=picker},2->1
7,param{ref:home},3->0
8,param{const txt=population},3->1
9,param{ref:home},5->0
10,param{const txt=population},5->1
,,
Syntax Tree,output,
1,lay scoot->0,
Nodes,Type,output (Node -> Input)
0,param{const txt=scoot},
,,
Syntax Tree,output,
1,lay picker->0,
Nodes,Type,output (Node -> Input)
0,param{const txt=picker},
,,
Syntax Tree,output,
1,lay soldier->0,
Nodes,Type,output (Node -> Input)
0,param{const txt=soldier},