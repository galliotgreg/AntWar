States,Name,Type
0,INIT,Init
1,green ressource found,Inter
2,red ressource found,Inter
3,goto elsewhere,trigger{goto}
4,goto search,trigger{goto}
5,trace green,trigger{trace}
6,goto green,trigger{goto}
7,trace red,trigger{trace}
8,goto red,trigger{goto}
,,
Transitions,Start State,End State
0,INIT,green ressource found
1,INIT,red ressource found
2,INIT,goto elsewhere
3,INIT,goto search
4,green ressource found,trace green
5,green ressource found,goto green
6,red ressource found,trace red
7,red ressource found,goto red
,,
Syntax Tree,output,
1,goto elsewhere->0,
Nodes,Type,output (Node -> Input)
0,operator{V[]aggV*},
1,operator{VrandCircleVS},0->0
2,param{vec:curPos},1->0
3,param{const scal=20},1->1
,,
Syntax Tree,output,
1,goto search->0,
Nodes,Type,output (Node -> Input)
0,operator{V[]aggV*},
1,param{vec:trgPos},0->0
,,
Syntax Tree,output,
1,trace green->0,
Nodes,Type,output (Node -> Input)
0,param{const color=Green},
,,
Syntax Tree,output,
1,trace green->1,
Nodes,Type,output (Node -> Input)
0,operator{V[]aggV*},
1,operator{VgetRT},0->0
2,param{ref:home},1->0
3,param{const txt=position},1->1
,,
Syntax Tree,output,
1,goto green->0,
Nodes,Type,output (Node -> Input)
0,operator{V[]aggV*},
1,operator{VgetRT},0->0
2,operator{RgetR[]S},1->0
3,operator{SminIdS[]},2->0
4,operator{S[]distV[]V},3->0
5,operator{V[]getR[]T},4->0
6,operator{R[]where==R[]TC},5->0
7,param{ref[]:res},6->0
8,param{const txt=color},6->1
9,param{const color=Green},6->2
10,param{const txt=position},5->1
11,param{vec:curPos},4->1
12,operator{R[]where==R[]TC},2->1
13,param{ref[]:res},12->0
14,param{const txt=color},12->1
15,param{const color=Green},12->2
16,param{const txt=position},1->1
,,
Syntax Tree,output,
1,trace red->0,
Nodes,Type,output (Node -> Input)
0,param{const color=Red},
,,
Syntax Tree,output,
1,trace red->1,
Nodes,Type,output (Node -> Input)
0,operator{V[]aggV*},
1,operator{VgetRT},0->0
2,param{ref:home},1->0
3,param{const txt=position},1->1
,,
Syntax Tree,output,
1,goto red->0,
Nodes,Type,output (Node -> Input)
0,operator{V[]aggV*},
1,operator{VgetRT},0->0
2,operator{RgetR[]S},1->0
3,operator{SminIdS[]},2->0
4,operator{S[]distV[]V},3->0
5,operator{V[]getR[]T},4->0
6,operator{R[]where==R[]TC},5->0
7,param{ref[]:res},6->0
8,param{const txt=color},6->1
9,param{const color=Red},6->2
10,param{const txt=position},5->1
11,param{vec:curPos},4->1
12,operator{R[]where==R[]TC},2->1
13,param{ref[]:res},12->0
14,param{const txt=color},12->1
15,param{const color=Red},12->2
16,param{const txt=position},1->1
,,
Syntax Tree,output,
1,0,
Nodes,Type,output (Node -> Input)
0,operator{B>SS},
1,operator{SsizeS[]},0->0
2,operator{R[]where==R[]TC},1->0
3,param{ref[]:res},2->0
4,param{const txt=color},2->1
5,param{const color=Green},2->2
6,param{const scal=0},0->1
,,
Syntax Tree,output,
1,1,
Nodes,Type,output (Node -> Input)
0,operator{B>SS},
1,operator{SsizeS[]},0->0
2,operator{R[]where==R[]TC},1->0
3,param{ref[]:res},2->0
4,param{const txt=color},2->1
5,param{const color=Red},2->2
6,param{const scal=0},0->1
,,
Syntax Tree,output,
1,3,
Nodes,Type,output (Node -> Input)
0,operator{B!=VV},
1,param{vec:curPos},0->0
2,param{vec:trgPos},0->1
,,
Syntax Tree,output,
1,4,
Nodes,Type,output (Node -> Input)
0,operator{B&&BB},
1,operator{B<SS},0->0
2,operator{SminValS[]},1->0
3,operator{S[]distV[]V},2->0
4,operator{VgetRT},3->0
5,operator{R[]where==R[]TC},4->0
6,param{ref[]:res},5->1
7,param{const color=Green},5->2
8,param{const txt=population},4->1
9,param{vec:curPos},3->1
10,param{const scal=1},1->1
11,operator{B==SS},0->1
12,param{const scal=0},11->0
13,operator{SsizeS[]},11->1
14,operator{R[]where==R[]TC},13->0
15,param{ref[]:traces},14->0
16,param{const txt=color},14->1
17,param{const color=Green},14->2
,,
Syntax Tree,output,
1,6,
Nodes,Type,output (Node -> Input)
0,operator{B&&BB},
1,operator{B<SS},0->0
2,operator{SminValS[]},1->0
3,operator{S[]distV[]V},2->0
4,operator{VgetRT},3->0
5,operator{R[]where==R[]TC},4->0
6,param{ref[]:res},5->0
7,param{const txt=color},5->1
8,param{const color=Red},5->2
9,param{const txt=population},4->1
10,param{vec:curPos},3->1
11,param{const scal=1},1->1
12,operator{B==SS},0->1
13,param{const scal=0},12->0
14,operator{SsizeS[]},12->1
15,operator{R[]where==R[]TC},14->0
16,param{ref[]:traces},15->0
17,param{const txt=color},15->1
18,param{const color=Red},15->2
,,
